169. Majority Element
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int curr = nums[0];
        int cnt =0;
        for(int i=0;i<nums.size();i++){
            if(curr == nums[i])
                cnt ++;   
            else
                cnt --;
            if(cnt == 0)
                curr = nums[i+1];
        }
        return curr;
        
    }
};

229. Majority Element II


class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int cand1=INT_MIN;
        int cand2 = INT_MIN;
        int count1 = 0,count2 =0;
        for(int i =0; i<nums.size();i++){
            if(cand1 != INT_MIN && cand1 == nums[i]){
                count1++;
            }else if(cand2 != INT_MIN && cand2 == nums[i]){
                count2++;
            }else if(count1 == 0 ){
                cand1 = nums[i];
                count1 =1;
            }else if(count2 == 0){
                cand2 = nums[i];
                count2 = 1;
            }else {
                count1 --;
                count2--;
            }

        }
        vector<int> result;
        // if(count1>0 && count2 >0){
        //     result.push_back(cand1);
        //     result.push_back(cand2);
        // }
        // else if( count1 >0 && count2<=0){
        //     result.push_back(cand1);
        // }else if(count2> 0 && count1 <=0){
        //         result.push_back(cand2);
        // }
        count1 =0;
        count2 =0;
        for( int  i =0;i<nums.size();i++){
           if(cand1 != INT_MIN && cand1 == nums[i]){
                count1++;
            }else if(cand2 != INT_MIN && cand2 == nums[i]){
                count2++;
            }
        }
        if(count1 >= ((nums.size()/3 )+ 1))
         result.push_back(cand1);
        if(count2 >= ((nums.size()/3 )+ 1)) 
        result.push_back(cand2);
        return result;
        
    }
};

769. Max Chunks To Make Sorted
class Solution {
public:
    int maxChunksToSorted(vector<int>& arr) {
        int chunk =0;
        int maxi =INT_MIN;
        for(int i=0;i<arr.size();i++){
            maxi = max(maxi,arr[i]);
            if(maxi == i){
                chunk++;
            }
        }
        return chunk;
    }
};


46. Permutations

class Solution {
public:
   void solve(vector<int>& nums,int index, vector<vector<int>>& ans){
        if(index>nums.size()-1){
            ans.push_back(nums);
            return;
        }

        for(int i=index;i<nums.size();i++){
            swap(nums[index],nums[i]);
            solve(nums,index+1,ans);
             swap(nums[index],nums[i]);
        }

    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        solve(nums,0,ans);
        return ans;
        
    }
};

53. Maximum Subarray

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int pos =0;
        int maxi = INT_MIN;
        int temp =0;
        int sum =0;
        for(int i = 0;i<nums.size();i++){
                sum = sum + nums[i];
                maxi = max(sum,maxi);
                if(sum < 0){
                    sum =0;
                }
                // for(int j =i;j<nums.size();j++){
                //     temp = temp + nums[j];
                //     maxi = max(maxi,temp);
                // }
                // temp =0;
        }
        return maxi;
    }
};

11. Container With Most Water


class Solution {
public:
    int maxArea(vector<int>& height) {
        // int s = 0,h=0;

        // int e = height.size()-1;
        // int maxi =INT_MIN;
        // while(e>s){
        //     h= min(height[e],height[s]);
        //     maxi = max(maxi,h*(e-s));
        //     if(height[s]<height[e]){
        //         s++;
        //     }else{
        //         e--;
        //     }  
        // }
        // return maxi;
        int s= 0,h =0;
        int next =1;
        int maxi =INT_MIN;
        for( int i =0 ; i<height.size();i++){
            for(int j = i;j<height.size();j++){
                h= min(height[i],height[j]);
                 maxi = max(maxi,h*(j-i));

            }
        }
        return maxi;
    }
};

Key Pair(GFG)

bool hasArrayTwoCandidates(int arr[], int n, int x) {
	     unordered_set<int> s;
	    for (int i = 0; i < n; i++) {
	        if (s.find(x-arr[i]) != s.end()) return true;
	        s.insert(arr[i]);
	    }
	    return false;
	}

Key Pair(GFG) with more optimal aproach
//User function template for C++
class Solution{
public:	
	// Function to check if array has 2 elements
	// whose sum is equal to the given value
	void bubble(int *arr,int size)
{
    if(size<0){
        return ;
    }
    for(int i=0;i<=size-1;i++){
        if(arr[i]>arr[i+1])
        {
            swap(arr[i],arr[i+1]);
        }
    }
    bubble(arr,size-1);
}
	bool hasArrayTwoCandidates(int arr[], int n, int x) {
	    bubble(arr,n-1);
	    int s =0,e = n-1;
	    int sum = 0;
	    while(s<e){
	        sum =arr[s]+ arr[e];
	        if(sum>x){
	            e--;
	        }else if(sum<x){
	            s++;
	        }
	        else{
	            return true;
	        }
	    }
	    return false;
	}
};

42. Trapping Rain Water(all approach)

class Solution {
public:
    // int maximum(vector<int>& height,int s , int e){
    //     if(s==e){
    //         return 0;
    //     }
    //     int maxi = INT_MIN;
    //     for(int  i= s ;i<e;i++){
    //         maxi = max(maxi,height[i]);
    //     }
    //     return maxi;
    // }
    int trap(vector<int>& height) {
        // int cap =0;
        // int leftmax,rightmax;
        // vector<int> left;
        // int right[height.size()];
        // int maxil=INT_MIN,maxir=INT_MIN;
        // for(int i =0 ;i<height.size();i++){
        //         maxil = max(maxil,height[i]);
        //         left.push_back(maxil);
        // }
        // for(int i =height.size()-1 ;i>=0;i--){
        //         maxir = max(maxir,height[i]);
        //         right[i]= maxir;
        // }


        // for(int i =0;i<height.size();i++){
        // leftmax =left[i];
        // rightmax = right[i];
        // int c = min(leftmax,rightmax)-height[i] ;
        // if(c>0){
        //     cap = cap + c;
        // }

        // }
        // return cap;
        int cap =0;
        int right_max =0,left_max =0;
        int left =0,right = height.size()-1;
        while(left<right){
            if(height[left]<=height[right]){
                if(height[left]>left_max) 
                    left_max = height[left];
                else
                    cap = cap +left_max - height[left];
                left++;
            }else
            {
                if(height[right]>right_max) 
                    right_max = height[right];
                else
                    cap = cap +right_max - height[right];
                right--;
            }
        }
        return cap;
    }
};
