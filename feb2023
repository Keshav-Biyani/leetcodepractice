class Solution {
public:
    int distanceBetweenBusStops(vector<int>& distance, int start, int destination) 
    {
        int  min=0;
        int p=0,q=0;
        if(destination>start)
        {
            for(int i=start;i<destination;i++)
            {
                p=distance[i]+p;
            }
            for(int i=0;i<distance.size();i++)
            {
                q=distance[i]+q;
            }
            q=q-p;
            if(p>q)
            {
                return q;
            }
            else 
                return p;
        }
        else
        {
            for(int i=destination;i<start;i++)
            {
                p=distance[i]+p;
            }
            for(int i=0;i<distance.size();i++)
            {
                q=distance[i]+q;
            }
            q=q-p;
            if(p>q)
            {
                return q;
            }
            else 
                return p;
        }
        return 5;

    }
};
problem 48
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) 
    {
            int m=matrix.size();
            int n=matrix[0].size();
            int srow=0,scol=0;
            int erow =m-1;
            int ecol=n-1;
            vector <int> temp,temp1,temp2,temp3;
            //starting row should greater than end row
            while(srow<erow)
            {
             //add all the periferal element in vector array   
            for(int col=srow;col<=ecol;col++)
            {
                temp.push_back(matrix[srow][col]);
                temp1.push_back(matrix[col][ecol]);
                temp2.push_back(matrix[erow][col]);
                temp3.push_back(matrix[col][scol]);
            }
            reverse(temp1.begin(), temp1.end());
            reverse(temp3.begin(), temp3.end());
            // add all periferal element after 90degree rotation of matrix
            int i =0 ; 
            for(int col=srow;col<=ecol;col++)
            {
                matrix[col][ecol]=temp[i];
                matrix[erow][col]=temp1[i];
                matrix[col][scol]=temp2[i];
                matrix[srow][col] = temp3[i];
            i++;
            }
            //clear vector
            temp.clear();
            temp1.clear();
            temp2.clear();
            temp3.clear();
            // coming to smaller matrix
            srow++;
            scol++;
            ecol--;
            erow--;
        }
    }
};
/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/
say number
#include <iostream>

using namespace std;

void callNumber(int n,string arr[])
{
    if(n==0){
        return ;
    }
    int d =n%10;
    n=n/10;
    callNumber(n,arr);
    std::cout << arr[d]<<" " ;
    
}
int main()
{
    int n;
    cin>>n;
    string arr[10]={
        "Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine"
    };
    callNumber(n,arr);
}
Recursion
#include <iostream>
using namespace std;

bool binary(int *arr,int s,int e,int p){
    if(e<s){
        return false;
    }
    int mid = (e-s)/2 +s;
    if(arr[mid]==p){
        return true;
    }
    if(arr[mid]<p)
    {
       bool q= binary(arr,mid+1,e,p);
       return q;
    }
    if(arr[mid]>p){
       bool q= binary(arr,s,mid-1,p);
        return q;
    }
   
}
int main()
{
    int arr[]={1,2,4,5,7};
    cout<<binary(arr,0,4,2);
   
    return 0;
}
#include <iostream>
using namespace std;

bool linearSearch(int arr[],int n,int p)
{
    if(n==0)
    {
        return false;
    }
    else if (p==arr[0])
    {
        return true;
    }
    
    linearSearch(arr+1,n-1,p);
        
    
}
int main()
{
    int arr[]={1,2,4,5,7};
    cout<<linearSearch(arr,4,16);
}
#include <iostream>
using namespace std;
int sumA(int arr[],int n)
{
       if(n>0)
       {
            arr[n-1]=arr[n-1] +arr[n];
            sumA(arr,n-1);
       }
       return arr[0];
}
int main(){
    int arr[] ={1,2,3,5,5};
    int m=sumA(arr,4);
    cout<<m;
}
